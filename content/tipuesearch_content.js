var tipuesearch = {"pages": [{'title': 'About', 'text': '此內容管理系統以\xa0 https://github.com/mdecourse/cmsimde \xa0作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作. \n 利用 cmsimde 建立靜態網誌方法: \n 1. 在 github 建立倉儲, git clone 到近端 \n 2. 參考\xa0 https://github.com/mdecourse/newcms , 加入除了 cmsimde 目錄外的所有內容 \n 以 git submodule add\xa0 https://github.com/mdecourse/cmsimde \xa0cmsimde \n 建立 cmsimde 目錄, 並從 github 取下子模組內容. \n 3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器. \n 動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端. \n 4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行: \n git clone --recurse-submodules  https://github.com/mdecourse/newcms.git \n', 'tags': '', 'url': 'About.html'}, {'title': 'Develop', 'text': 'https://github.com/mdecourse/cmsimde \xa0的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443\xa0就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容. \n cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版. \n init.py 位於\xa0 up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數. \n', 'tags': '', 'url': 'Develop.html'}, {'title': 'Introduction', 'text': 'In recent years, the integration of image recognition and virtual reality become more and more extensive in the mechatronic product development [4-6]. Moreover, due to the rapid progress of Internet information technology, the impact of virtual and physical integration technology on product development becomes more common [19]. This paper developed an air hockey robot that can be played by human and computer program to use the image recognition to play the match. There are two major different type of air hockey game design, one use disk puck on an air cushion table and another use hover puck on any ordinary flat surface or table. In this research, hover puck design was chosen to allow air hockey robot to be attached to computer table of any size. This research is divided into four parts. The first step is to create a physical air hockey robot and use Python program for image recognition to allow the web camera to catch the position of the hover puck, and activate the two-degree-of-freedom motion of the mallet accordingly. The second step is to use CoppeliaSim [2] to simulate the mechatronic air hockey scene, and the third part is to use the Flow Simulation functions of Solidworks and COMSOL to analyze the air cushion dynamics of the fan blades inside the hover puck. In the end, the virtual and physical air hockey scene were streamed into the user web browser to allow multiple users to monitor or participate into the cyber-physical game. \n', 'tags': '', 'url': 'Introduction.html'}, {'title': 'Literature Review', 'text': '', 'tags': '', 'url': 'Literature Review.html'}, {'title': 'Design Process', 'text': '', 'tags': '', 'url': 'Design Process.html'}, {'title': 'Physical Design', 'text': 'Onshape Files: \n air hockey robot assembly \n \n In order to collaboratively design all parts of the X-Y table system to manipulate the planar motion of the mallet, the full cloud computer aided design system,  Onshape  was used. The motion control of the hockey mallet is implemented by using Arduino、 stepping motors and pulley-belt system to position the mallet. \n The designed air hockey  Onshape  assembly file can be accessed from. The mechatronic simulation of the air hockey machine is completed in  Coppeliasim . \n The design of the hover puck uses the air flow generated by the built-in fan to levitate from the platform to reduce the friction, so that it can move smoothly The control uses the Arduino circuit board to receive the binary data transmitted by the Python module Pyserial for corresponding control, so that the motor can move along X and Y coordinates. \n The air hockey robot completed in this research can be assembled on a common computer desk. The hover puck can float on the desk by the downward negative pressure driven by the fan. And the two-degree-of-freedom movement range of the X-Y Table can adapt to the size of the table. In achieving the levitation effect, the hover puck needs three AAA batteries, which are arranged into a triangular layout around the motor to achieve dynamic balance.', 'tags': '', 'url': 'Physical Design.html'}, {'title': 'Program Development', 'text': 'The image recognition program is written in Python combined with the OpenCV module, and interacts with the virtual environment through the remote api interface of Coppeliasim. The hockey mallet in the physical model is also guided through the same image recognition program. The structure that controls the action of the hockey mallet can be simultaneously used on physical and virtual air hockey game platforms. In order to accurately estimate the speed and direction of the hover puck motion, we calculate the position difference from each image sensor frame in the image recognition program.', 'tags': '', 'url': 'Program Development.html'}, {'title': 'Image Recognition', 'text': '', 'tags': '', 'url': 'Image Recognition.html'}, {'title': 'Color Conversion', 'text': 'RGB is the three primary colors of light, namely Red, Green and Blue. The image output is mostly in this form, but this method is very difficult to capture a specific color in settings, so it is converted to HSV Display, HSV stands for Hue, Saturation and Value respectively. Use Hue to adjust to the desired color, and then set saturation and lightness. \n', 'tags': '', 'url': 'Color Conversion.html'}, {'title': 'Filtration of Color', 'text': "Use the values of the three colors contained in each pixel to leave the required range, and remove the rest to get the filtered image. When filtering, give the upper and lower limits of the color range. \n Original image: \n \n After Filtration: \xa0 \n Filtration Range: (90,50,50)~(110,255,255) \n \n Code: \n import cv2, numpy\n\nimg = cv2.imread('Rainbow.jpg')\nhsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\nrange = 10\nlower_color = numpy.array([100-range,50,50])\nupper_color = numpy.array([100+range,255,255])\nmask = cv2.inRange(hsv, lower_color, upper_color)\n\ncv2.imshow('My Image', mask)\ncv2.waitKey(0)\ncv2.destroyAllWindows() \n", 'tags': '', 'url': 'Filtration of Color.html'}, {'title': 'Noise Removal Process', 'text': "When using a webcam to take pictures in real time, the image will accompany with noise due to the propagation of electronic signals or other external factors. This noise is likely to cause a lot of unnecessary output during image processing, so it is necessary to perform noise filtering to prevent affecting the accuracy of the output results. The image noise filtering in this paper has two steps, that is, first mask the noise and then remove the mask noise. Noise masking algorithms mainly use thresholding and segmentation according the color of the hover puck. \n Orginal image: \n \n After\xa0Noise Removal: \n \n Code: \n import cv2, numpy\n\nimg = cv2.imread('Rainbow.jpg')\nhsv = cv2.cvtColor(img, cv2.COLOR_BGR2HSV)\nrange = 10\nlower_color = numpy.array([100-range,50,50])\nupper_color = numpy.array([100+range,255,255])\nmask = cv2.inRange(hsv, lower_color, upper_color)\n\nkernel = numpy.ones((7,7),numpy.uint8)\nmask2 = cv2.morphologyEx(mask, cv2.MORPH_OPEN, kernel)\n\ncv2.imshow('My Image', mask2)\ncv2.waitKey(0)\ncv2.destroyAllWindows() \n", 'tags': '', 'url': 'Noise Removal Process.html'}, {'title': 'Adjustment of Image', 'text': "The coordinates are obtained from the image, so the x y plane's correction is very important. Cause the reasons, it's hard to be accurate. 1.  It is difficult to make the webcam be perpendicular to the table. 2. T he coordinate value is  easily  affected by  the v ibration. \n So we use the yellow point which is on the table to adjust the image. \n", 'tags': '', 'url': 'Adjustment of Image.html'}, {'title': 'Path Prediction', 'text': '', 'tags': '', 'url': 'Path Prediction.html'}, {'title': 'Translational Velocity of the Air Puck', 'text': '', 'tags': '', 'url': 'Translational Velocity of the Air Puck.html'}, {'title': 'Linear Movement', 'text': '', 'tags': '', 'url': 'Linear Movement.html'}, {'title': 'Rebound Calculation', 'text': '', 'tags': '', 'url': 'Rebound Calculation.html'}, {'title': 'Cyber-Physical Mechatronic System', 'text': '', 'tags': '', 'url': 'Cyber-Physical Mechatronic System.html'}]};